# Generated by Django 5.1.6 on 2025-07-08 06:04

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('aistudycompanion', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomLearningMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('subject', models.CharField(blank=True, max_length=100)),
                ('document_type', models.CharField(choices=[('pdf', 'PDF Document'), ('doc', 'Word Document'), ('docx', 'Word Document (DOCX)'), ('txt', 'Text File')], max_length=10)),
                ('file', models.FileField(upload_to='learning_materials/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'txt'])])),
                ('file_size', models.IntegerField(help_text='File size in bytes')),
                ('pages', models.IntegerField(blank=True, help_text='Number of pages (for PDFs)', null=True)),
                ('is_processed', models.BooleanField(default=False, help_text='Whether the document has been processed for RAG')),
                ('processing_status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_materials', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DocumentChunk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chunk_index', models.IntegerField(help_text='Order of chunk in document')),
                ('content', models.TextField(help_text='Text content of the chunk')),
                ('page_number', models.IntegerField(blank=True, help_text='Page number (for PDFs)', null=True)),
                ('embedding', models.JSONField(blank=True, help_text='Vector embedding of the chunk', null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata like section headers, etc.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('material', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chunks', to='aistudycompanion.customlearningmaterial')),
            ],
            options={
                'ordering': ['material', 'chunk_index'],
                'unique_together': {('material', 'chunk_index')},
            },
        ),
        migrations.CreateModel(
            name='RAGQuery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.TextField(help_text="User's question")),
                ('response', models.TextField(help_text='AI response')),
                ('confidence_score', models.FloatField(blank=True, help_text='Confidence score of the response (0-1)', null=True, validators=[django.core.validators.MaxValueValidator(1.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('material', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='queries', to='aistudycompanion.customlearningmaterial')),
                ('relevant_chunks', models.ManyToManyField(blank=True, help_text='Chunks used to generate response', to='aistudycompanion.documentchunk')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rag_queries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'RAG Queries',
                'ordering': ['-created_at'],
            },
        ),
    ]
